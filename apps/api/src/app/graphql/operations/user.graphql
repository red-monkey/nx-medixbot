fragment UserFields on TUser {
  id
  fullName
  email
  tel
  gender
  userRole
  accountStatus
  registeredWith
  dateOfBirth
  country
  city
  state
  postCode
  membership
  languages
}
fragment TokenFields on TToken {
  access {
    token
    expires
  }
  refresh {
    token
    expires
  }
}

# useUserQuery hook will be generated
query User($userId: ID!) {
  user(userId: $userId) {
    ...UserFields
  }
}

# useMeQuery hook will be generated
query Me {
  me {
    ...UserFields
  }
}

# useUsersQuery hook will be generated
query Users {
  users {
    page
    results {
      ...UserFields
    }
    limit
    totalPages
    totalResults
  }
}

# useLoginMutation hook will be generated
mutation Login($username: String!, $password: String!) {
  login(username: $username, password: $password) {
    user {
      ...UserFields
    }
    tokens {
      ...TokenFields
    }
  }
}

mutation Register($data: IRegisterUser!) {
  register(data: $data) {
    user {
      ...UserFields
    }
    tokens {
      ...TokenFields
    }
  }
}

mutation RefreshTokens($refreshToken: String!) {
  refreshTokens(refreshToken: $refreshToken) {
    ...TokenFields
  }
}

mutation DeleteUser($userId: ID!) {
  deleteUser(userId: $userId)
}

mutation UpdateAccount($data: IUpdateUser!) {
  updateAccount(data: $data) {
    ...UserFields
  }
}

mutation Logout($refreshToken: String!) {
  logout(refreshToken: $refreshToken) {
    message
  }
}

mutation ForgotPassword($email: String!) {
  forgotPassword(email: $email) {
    message
  }
}

mutation ResetPassword($token: String!, $password: String!) {
  resetPassword(token: $token, password: $password) {
    message
  }
}

mutation SendVerificationEmail {
  sendVerificationEmail {
    message
  }
}
